#!/bin/bash

LOGFILE=~/Desktop/FileTool3.log

# ===== Spinner Animation =====
spinner() {
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
    while kill -0 $pid 2>/dev/null; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# ===== Logging =====
log_action() {
    local msg="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $msg" >> "$LOGFILE"
}

# ===== File Handler =====
handle_file() {
    local f="$1"
    local mode="$2"

    f="${f%\"}"
    f="${f#\"}"

    local type_label=""
    local is_script=false

    if [[ "$f" == *.sh || "$f" == *.py || "$f" == *.command ]]; then
        type_label="\033[0;32m[SCRIPT]\033[0m"
        is_script=true
    elif [[ "$f" == *.app ]]; then
        type_label="\033[0;34m[APP]\033[0m"
    elif [[ "$f" == *.dmg || "$f" == *.pkg || "$f" == *.zip ]]; then
        type_label="\033[0;33m[INSTALLER]\033[0m"
    elif [ -f "$f" ] && head -n 1 "$f" | grep -q '^#!'; then
        type_label="\033[0;32m[SCRIPT]\033[0m"
        is_script=true
        echo -e "[INFO] Detected shebang: $(head -n1 "$f") — will be treated as a script"
    else
        type_label="\033[0;37m[UNSUPPORTED]\033[0m"
        echo -e "[INFO] Binary or unsupported file — no action needed"
    fi

    if [ -f "$f" ] || [[ "$f" == *.app ]]; then
        echo -e "Processing $type_label: $f"
        case "$mode" in
            exec)
                if $is_script; then
                    echo "Making '$f' executable..."
                    (chmod +x "$f") & spinner
                    echo -e "✅ File '$f' is now executable."
                    log_action "Made executable: $f"
                else
                    echo -e "⚠️  Skipping '$f' (not a script type)."
                    log_action "Skipped executable: $f"
                fi
                ;;
            quarantine)
                if [[ "$f" == *.app ]]; then
                    echo "Removing quarantine from app bundle '$f'..."
                    (sudo xattr -dr com.apple.quarantine "$f") & spinner
                    echo -e "✅ Quarantine removed from '$f'."
                    log_action "Quarantine removed: $f"
                elif [[ "$f" == *.dmg || "$f" == *.pkg || "$f" == *.zip || $is_script ]]; then
                    echo "Removing quarantine from '$f'..."
                    (sudo xattr -d com.apple.quarantine "$f" 2>/dev/null) & spinner
                    echo -e "✅ Quarantine removed from '$f'."
                    log_action "Quarantine removed: $f"
                else
                    echo -e "⚠️  Skipping '$f' (unsupported file type)."
                    log_action "Skipped quarantine: $f"
                fi
                ;;
        esac
        return
    fi

    if [ -d "$f" ]; then
        matches=( "$f"/*.app "$f"/*.dmg "$f"/*.pkg "$f"/*.zip "$f"/*.sh "$f"/*.py "$f"/*.command )
        real_matches=()
        for m in "${matches[@]}"; do
            [ -e "$m" ] && real_matches+=( "$m" )
        done

        if [ ${#real_matches[@]} -eq 1 ]; then
            echo "Found one candidate inside folder:"
            handle_file "${real_matches[0]}" "$mode"
        elif [ ${#real_matches[@]} -gt 1 ]; then
            echo -e "⚠️  Multiple candidate files found in folder. Nothing was changed for safety."
            log_action "Multiple candidates in folder skipped: $f"
        else
            echo "No supported files found inside folder."
            log_action "No supported files in folder: $f"
        fi
        return
    fi

    echo "File or folder not found!"
    log_action "File/folder not found: $f"
}

# ===== Main Menu =====
while true; do
    clear
    echo "================ Simple File Utility ================"
    echo "What would you like to do?"
    echo "1) Make a file executable"
    echo "2) Remove quarantine from a file"
    echo "3) Exit"
    read -p "Choose an option (1/2/3): " choice

    case "$choice" in
        1)
            echo "Drag and drop the script file or folder into the terminal and press Enter:"
            read file
            handle_file "$file" "exec"
            read -p "Press Enter to return to the menu..."
            ;;
        2)
            echo "Drag and drop the file or folder into the terminal and press Enter:"
            read file
            handle_file "$file" "quarantine"
            read -p "Press Enter to return to the menu..."
            ;;
        3)
            echo "Script finished. All the best to you!"
            break
            ;;
        *)
            echo "Invalid choice. Please try again."
            read -p "Press Enter to continue..."
            ;;
    esac
done
